---
title: "Data"
format:
  html:
    embed-resources: true
execute: 
  echo: true
---

## Description


Our dataset consists of 23 columns, with the number of rows/samples depending on the specific range of match_ids included. For example, in the dataset below, we used match_ids ranging from 1 to 500. It is important to note that match_ids from indexes 1 until 80 are absent. Instead of generating an error when a match_id is missing, we implemented a tryCatch function to handle this scenario gracefully. This function checks if a match_id exists, and if it does not, it inserts a NaN value in the dataset. As a result, any NaN values in our dataset are solely due to missing match_ids; otherwise, the dataset is free of missing values or NaNs. In the case of match_ids 1 to 500, our dataset has a total of 11,654 observations, resulting in a dataset shape of 11,654 rows by 23 columns.

The dataset includes the following features along with their descriptions:

```         
•   match_id: The unique identifier for each match. If a match is not present in the dataset, this value is NaN.
•   id: A unique identifier for each row in the dataset.
•   team_id: The unique identifier for each team. For example, Manchester United has a team_id of 89.
•   home_away: Indicates whether the player participated in a home or away game. h stands for a home stadium, and a stands for an away stadium.
•   player_id: A unique identifier for each player. For instance, Sergio Romero has a player_id of 560.
•   swap_id: An identifier related to player swaps .
•   player: The name of the player the row data refers to.
•   position: The position the player played in during the match (e.g., GK for Goalkeeper).
•   positionOrder: A ranking or order related to player positions (specific details are not provided).
•   time_played: The total minutes a player participated in the match.
•   goals: The number of goals scored by the player during the match.
•   own_goals: The number of own goals scored by the player in the match.
•   shots: The number of shots taken by the player during the match.
•   xG: Expected Goals, an estimate of the goals the player was predicted to score based on shot quality and other factors.
•   yellow_card: The number of yellow cards received by the player during the match.
•   red_card: Indicates if the player received a red card (a player can only receive a maximum of one red card per match).
•   roaster_in: Whether the player was substituted into the game .
•   roaster_out: Whether the player was substituted out of the game .
•   key_passes: The number of key passes made by the player, which are passes that lead to a scoring opportunity.
•   assists: The total assists made by the player during the match.
•   xA: Expected Assists, predicting how many assists the player should have contributed in the match.
•   xGChain: A metric indicating the cumulative expected goals involvement in possessions the player is part of.
•   xGBuildup: Expected goals involvement in build-up play, excluding key passes and shots.

```

### Dataset Source

[Dataset R Package](https://github.com/JaseZiv/worldfootballR) 

[Dataset Repo (Source)](https://jaseziv.github.io/worldfootballR/articles/extract-understat-data.html#player-data)


### Fetching Data (for specific match_ids)

This dataset provides a comprehensive view of player performance and match dynamics using both traditional and advanced metrics.

```{r}
#install.packages('devtools')
#devtools::install_github("JaseZiv/worldfootballR")
```

```{r}
# devtools::install_github("ewenme/understatr")
library(understatr)
```

The data was collected by comparing multiple datasets from different sources related to soccer and assessing their usability and relevance. We finalized on World Football Data for R. The research and comparison of the datasets were done collectively by all three members of the group.

The website guiding the installation of the dataset and providing the link to the GitHub repository was last updated on November 15, 2024, with a prior update in June 2024. The most recent change to the repository, specifically to the README file, was made 4 days ago. The author appears to update the repository frequently, as indicated by the varying timestamps on different folders and files.

The World Football Data repository offers a wide range of datasets, and for this project, we have chosen to work with the player performance data for individual matches. This dataset was last updated 4 months ago. We plan to update the match_ids to a sequential list of match_id values and fetch data for those match_ids. If no data is available for a particular match_id, we will add a row with NaN values. Otherwise, we will add the corresponding match data.

One issue we observed is that some of the data in the repository has not been updated recently, with some datasets being as old as 2 years. This is another reason we chose to work with player performance in specific matches, as this data is more recently updated.

To fetch data for a single match, we can use the understat_match_players function from the understatr library. Below is a glimpse of how we can fetch data for match ID 14788.

```{r}
library(worldfootballR)
wba_liv_players <- understat_match_players(match_url = "https://understat.com/match/14788")

```

Combining data for matches with the given match ID:

```{r,message=FALSE,warning=FALSE}
library(dplyr)

# Define the match IDs
match_ids <- seq(1, 500)            #Specify the match Ids for which you want to fetch data
match_list <- list()

# Get column names
example_match_url <- "https://understat.com/match/14788"
example_data <- tryCatch({
  understat_match_players(match_url = example_match_url)
}, error = function(e) {
  data.frame() # Return an empty data frame if the example fails
})
default_columns <- names(example_data)

# Iterate over match IDs
for (id in match_ids) {
  match_url <- paste0("https://understat.com/match/", id)
  match_data <- tryCatch({
    # Attempt to fetch match data
    understat_match_players(match_url = match_url)
  }, error = function(e) {
    # Handle errors by creating an NA data frame
    data.frame(matrix(NA, nrow = 1, ncol = length(default_columns)),
               stringsAsFactors = FALSE) %>%
      setNames(default_columns)
  })

  # Add match ID to the data
  match_data$id <- id
  match_list[[as.character(id)]] <- match_data
}

#Combine all match data into a single data frame
all_match_players <- bind_rows(match_list)

```

“Creating a CSV file of the data:

```{r}
# write.csv(all_match_players, "combined_match_players_0-500.csv", row.names = FALSE)
```

## Missing Value Analysis

In our dataset, missing values are introduced only for incorrect match_id values. For the correct match_id values, there are no missing values, ensuring data completeness. However, when an incorrect match_id is encountered, we add a row with NaN values for all columns except for the id column, which serves as an identifier. This approach allows us to clearly identify and track the rows with invalid match_id values. In total, there are 80 incorrect match_id values in the dataset, resulting in 80 rows where all values are NaN, except for the id.

```{r,message=FALSE,warning=FALSE}

library(ggplot2)
library(dplyr)
library(tidyr)
library(VIM)
library(naniar)
library(scales)

nan_summary <- all_match_players %>%
  summarise(
    all_nan_count = sum(apply(all_match_players[, -which(names(all_match_players) == "id")], 1, function(x) all(is.na(x)))),
    complete_count = n() - all_nan_count
  ) %>%
  pivot_longer(cols = c("all_nan_count", "complete_count"), names_to = "status", values_to = "count") %>%
  mutate(
    status = ifelse(status == "all_nan_count", "All Columns NaN (except id)", "Complete Rows"),
    percentage = count / sum(count)  # Calculate percentage
  )

# Pie chart with labels (2 decimal points)
ggplot(data = nan_summary, aes(x = "", y = count, fill = status)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  labs(title = "Proportion of Rows with All Columns NaN (except id) vs. Complete Rows") +
  theme_void() +
  scale_fill_manual(values = c("steelblue", "coral")) +
  theme(legend.title = element_blank()) +
  geom_text(aes(label = paste0(count, " (", scales::percent(percentage, accuracy = 0.01), ")")), 
            position = position_stack(vjust = 0.5))

```
The pie chart depicts that 99% of pur data is complete with no missing values.


```{r, fig.height=8}
# library(ggplot2)
# library(tidyr)
# library(dplyr)
library(redav)
data_missing <- all_match_players[!complete.cases(all_match_players), ]
plot_missing(data_missing, max_cols = 8, num_char = 3, percent = FALSE) +
  labs(title = "Missing Values Pattern Analysis") +
  theme(plot.title = element_text(hjust = 2, vjust = 33.5))
```
The plot of missing also verifies the same information that the quality of data is very good with minimal missing values.
Match IDs from 1 - 80 do not have any data and this is represented by the first bar chart. But the remaining two graphs supports our missing data analysis claim of having minimal missing values.