[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Soccer Stats",
    "section": "",
    "text": "1 Introduction\nSoccer is the most popular sport globally, with over 2 billion viewers tuning in to the FIFA World Cup Final 2022. Recently, the game has been transformed by the integration of data analytics, reshaping how teams approach strategy. Soccer managers now rely heavily on data analysis to make critical decisions, such as selecting the starting lineup, identifying transfer market targets, and determining in-game substitutions. Additionally, extensive datasets of soccer matches are readily available, enabling deeper insights into the sport.\nThis project aims to conduct an in-depth analysis of soccer performance, focusing on key factors and questions that impact outcomes at both the player and team levels. The primary goal is to extract actionable insights by exploring various dynamics within the data.\nOur analysis will examine player performance across consecutive matches, evaluating how individuals sustain or adapt their performance over time while identifying patterns of consistency or decline. Beyond individual performance, we will assess overall team performance, comparing actual outcomes with expected performance to pinpoint teams that are overachieving or underperforming.\nKey elements of the study include analyzing how passing accuracy and assist patterns influence team success, investigating the advantages of playing at home, and assessing the impact of starting lineups and in-game substitutions on match results. The findings will be presented through detailed charts and metrics, offering a clear framework for building the ultimate team.\nBy utilizing data-driven techniques, this project seeks to deliver valuable insights that can help teams optimize their strategies and give fans a deeper understanding of the elements driving success on the soccer field.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nOur dataset consists of 23 columns, with the number of rows/samples depending on the specific range of match_ids included. For example, in the dataset below, we used match_ids ranging from 1 to 500. It is important to note that match_ids from indexes 1 until 80 are absent. Instead of generating an error when a match_id is missing, we implemented a tryCatch function to handle this scenario gracefully. This function checks if a match_id exists, and if it does not, it inserts a NaN value in the dataset. As a result, any NaN values in our dataset are solely due to missing match_ids; otherwise, the dataset is free of missing values or NaNs. In the case of match_ids 1 to 500, our dataset has a total of 11,654 observations, resulting in a dataset shape of 11,654 rows by 23 columns.\nThe dataset includes the following features along with their descriptions:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "",
    "text": "•   match_id: The unique identifier for each match. If a match is not present in the dataset, this value is NaN.\n•   id: A unique identifier for each row in the dataset.\n•   team_id: The unique identifier for each team. For example, Manchester United has a team_id of 89.\n•   home_away: Indicates whether the player participated in a home or away game. h stands for a home stadium, and a stands for an away stadium.\n•   player_id: A unique identifier for each player. For instance, Sergio Romero has a player_id of 560.\n•   swap_id: An identifier related to player swaps .\n•   player: The name of the player the row data refers to.\n•   position: The position the player played in during the match (e.g., GK for Goalkeeper).\n•   positionOrder: A ranking or order related to player positions (specific details are not provided).\n•   time_played: The total minutes a player participated in the match.\n•   goals: The number of goals scored by the player during the match.\n•   own_goals: The number of own goals scored by the player in the match.\n•   shots: The number of shots taken by the player during the match.\n•   xG: Expected Goals, an estimate of the goals the player was predicted to score based on shot quality and other factors.\n•   yellow_card: The number of yellow cards received by the player during the match.\n•   red_card: Indicates if the player received a red card (a player can only receive a maximum of one red card per match).\n•   roaster_in: Whether the player was substituted into the game .\n•   roaster_out: Whether the player was substituted out of the game .\n•   key_passes: The number of key passes made by the player, which are passes that lead to a scoring opportunity.\n•   assists: The total assists made by the player during the match.\n•   xA: Expected Assists, predicting how many assists the player should have contributed in the match.\n•   xGChain: A metric indicating the cumulative expected goals involvement in possessions the player is part of.\n•   xGBuildup: Expected goals involvement in build-up play, excluding key passes and shots.\n\n\n2.1.1 Dataset Source\nDataset R Package\nDataset Repo (Source)\n\n\n2.1.2 Fetching Data (for specific match_ids)\nThis dataset provides a comprehensive view of player performance and match dynamics using both traditional and advanced metrics.\n\n\nCode\n#install.packages('devtools')\n#devtools::install_github(\"JaseZiv/worldfootballR\")\n\n\n\n\nCode\n# devtools::install_github(\"ewenme/understatr\")\n# library(understatr)\n\n\nThe data was collected by comparing multiple datasets from different sources related to soccer and assessing their usability and relevance. We finalized on World Football Data for R. The research and comparison of the datasets were done collectively by all three members of the group.\nThe website guiding the installation of the dataset and providing the link to the GitHub repository was last updated on November 15, 2024, with a prior update in June 2024. The most recent change to the repository, specifically to the README file, was made 4 days ago. The author appears to update the repository frequently, as indicated by the varying timestamps on different folders and files.\nThe World Football Data repository offers a wide range of datasets, and for this project, we have chosen to work with the player performance data for individual matches. This dataset was last updated 4 months ago. We plan to update the match_ids to a sequential list of match_id values and fetch data for those match_ids. If no data is available for a particular match_id, we will add a row with NaN values. Otherwise, we will add the corresponding match data.\nOne issue we observed is that some of the data in the repository has not been updated recently, with some datasets being as old as 2 years. This is another reason we chose to work with player performance in specific matches, as this data is more recently updated.\nTo fetch data for a single match, we can use the understat_match_players function from the understatr library. Below is a glimpse of how we can fetch data for match ID 14788.\n\n\nCode\n# library(worldfootballR)\n# wba_liv_players &lt;- understat_match_players(match_url = \"https://understat.com/match/14788\")\n# \n# ```\n# \n# Combining data for matches with the given match ID:\n# \n# ```{r,message=FALSE,warning=FALSE}\n# library(dplyr)\n# \n# #match IDs\n# match_ids &lt;- seq(1, 500)          \n# match_list &lt;- list()\n# \n# #column names\n# example_match_url &lt;- \"https://understat.com/match/14788\"\n# example_data &lt;- tryCatch({\n#   understat_match_players(match_url = example_match_url)\n# }, error = function(e) {\n#   data.frame() \n# })\n# default_columns &lt;- names(example_data)\n# \n# #iterate over match IDs\n# for (id in match_ids) {\n#   match_url &lt;- paste0(\"https://understat.com/match/\", id)\n#   match_data &lt;- tryCatch({\n#     understat_match_players(match_url = match_url)\n#   }, error = function(e) {\n#     #error handling\n#     data.frame(matrix(NA, nrow = 1, ncol = length(default_columns)),\n#                stringsAsFactors = FALSE) %&gt;%\n#       setNames(default_columns)\n#   })\n# \n#   match_data$id &lt;- id\n#   match_list[[as.character(id)]] &lt;- match_data\n# }\n# \n# #Combine all data into a single data frame\n# all_match_players &lt;- bind_rows(match_list)\n\n\nCreating a CSV file of the data:\n\n\nCode\n# write.csv(all_match_players, \"combined_match_players_0-500.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing Value Analysis",
    "text": "2.2 Missing Value Analysis\nIn our dataset, missing values are introduced only for incorrect match_id values. For the correct match_id values, there are no missing values, ensuring data completeness. However, when an incorrect match_id is encountered, we add a row with NaN values for all columns except for the id column, which serves as an identifier. This approach allows us to clearly identify and track the rows with invalid match_id values. In total, there are 80 incorrect match_id values in the dataset, resulting in 80 rows where all values are NaN, except for the id.\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(naniar)\n\nall_match_players &lt;- read.csv(\"combined_match_players_0-500.csv\")\n\nmissing_values &lt;- all_match_players %&gt;%\n  summarise_all(~sum(is.na(.))) %&gt;%\n  pivot_longer(\n    everything(), \n    names_to = \"Variable\", values_to = \"MissingCount\"\n    ) %&gt;%\n  filter(MissingCount &gt; 0)\n\nggplot(missing_values, aes(x = Variable, y = MissingCount)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Bar Chart of Missing Values by Variable\",\n       x = \"Variable\",\n       y = \"Number of Missing Values\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nThe bar chart depicts that each column in the data has 80 missing values which corresponds to the NaN rows inserted for invalid match ids indicating that the rest of our data (the rows with valid match ids) have no missing values.\n\n\nCode\n# library(ggplot2)\n# library(tidyr)\n# library(dplyr)\n#library(remotes)\n#remotes::install_github(\"jtr13/redav\")\n\nlibrary(redav)\n\ndata_missing &lt;- all_match_players[!complete.cases(all_match_players), ]\nplot_missing(data_missing, max_cols = 8, num_char = 3, percent = FALSE) +\n  labs(title = \"Missing Values Pattern Analysis\") +\n  theme(plot.title = element_text(hjust = 2, vjust = 48))\n\n\n\n\n\n\n\n\n\nThe plot of missing also verifies the same information that the quality of data is good with minimal missing values. There is only 1 missing value pattern observed which we can safely say comes from match IDs from 1 - 80 since they are the NaN rows corresponding to invalid match ids.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Game Changers: Identifying the Most Influential Players\nThis chart is used to analyse the total playing time for each player in their respective teams. We do this by plotting a horizontal bar chart for the minutes played by per match for each player faceted by team.\nCode\nteam_names &lt;- c(\"71\" = \"Aston Villa\", \"72\" = \"Everton\", \"73\" = \"Bournemouth\", \"74\" = \"Southampton\", \"75\" = \"Leicester City\", \"76\" = \"West Bromwich Albion\", \"77\" = \"Sunderland\",\"78\" = \"Crytsal Palace\", \"79\" = \"Norwich City\", \"80\" = \"Chelsea\", \"81\" = \"West Ham\", \"82\" = \"Tottenham Hotspur\",\"83\" = \"Arsenal\", \"84\" = \"Swansea City\", \"85\" = \"Stoke City\", \"86\" = \"Newcastle United\", \"87\" = \"Liverpool\",\"88\" = \"Manchester City\", \"89\" = \"Manchester United\", \"90\" = \"Watford\", \"91\" = \"Hull City\", \"92\" = \"Burnley\", \"93\"=\"Middlesbrough\")\n\nplayer_df$team_name &lt;- team_names[as.character(player_df$team_id)]\n\ndf_time_played_grouped &lt;- player_df |&gt;\n  group_by(team_name, player) |&gt;\n  summarise(total_time_played = sum(time_played), .groups = \"drop\")\n\nggplot(df_time_played_grouped, \n       aes(x = total_time_played, y = reorder(player,total_time_played))) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  facet_wrap(~team_name, scales = \"free_y\") +          \n  labs(\n    title = \"Total Playing Time per Player, Faceted by Team\",\n    x = \"Total Time Played (in minutes)\",\n    y = \"Players\"\n  ) +\n  theme_minimal() +\n  theme(strip.text = element_text(size = 12, face = \"bold\"))\nThe importance of a player to a team can be assessed based on the amount of playing time they accumulate. Generally, more important players tend to play more minutes compared to those with lesser roles (though this can be influenced by factors such as injuries). Therefore, by examining the bar graph, we can identify which players are crucial to each team. Players positioned at the top of the bar chart for each team are likely to be the most important.\nThis also allow us to assess which players may be overworked and could potentially benefit from more rest. By analyzing the amount of playing time, we can identify players who are being relied upon heavily, which may indicate a risk of fatigue or injury if not managed properly.\nFor example, Hector Bellerin stands out as one of Arsenal’s most crucial players, as he has accumulated the highest amount of playing time. This suggests that he is a key part of the team’s strategy and is likely being relied upon for consistent performance. Such insights help in understanding player dynamics and can guide decisions related to player rotation and rest to maintain peak performance throughout the season.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#team-work-makes-the-dream-work-analysing-player-assists",
    "href": "results.html#team-work-makes-the-dream-work-analysing-player-assists",
    "title": "3  Results",
    "section": "3.2 Team Work Makes The Dream Work: Analysing Player Assists",
    "text": "3.2 Team Work Makes The Dream Work: Analysing Player Assists\nNext we use a cleveland dot plot to analyse the expected performance against the actual performance of the top 20 players with the highest total assists.\n\n\nCode\naverage_assists &lt;- player_df %&gt;%\n  group_by(player) %&gt;%\n  summarise(\n    total_xA = sum(xA),\n    total_assists = sum(assists),\n  ) %&gt;%\n  arrange(desc(total_assists))\n\ntop_20 &lt;- head(average_assists, 20)\n#print(top_10_assists)\n\nggplot(top_20, \n       aes(y = reorder(player, total_assists))) +\n  geom_point(aes(x = total_assists, color = \"Actual Assists\"), \n             size = 3) +  \n  geom_point(aes(x = total_xA, color = \"Expected Assists\"), \n             size = 3) +  \n  labs(\n    title = \"Player Performance: Average Assists vs Expected Assists\",\n       x = \"Assists\",\n       y = \"Player\"\n    ) +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Actual Assists\" = \"steelblue\", \"Expected Assists\" = \"coral\"), \n                     name = \"Type\") +  \n  guides(color = guide_legend(title = \"Type\"))\n\n\n\n\n\n\n\n\n\nMost of the players with the highest assists in all the matches played exceeded their expected assists. Barring Riyah Mahrez and Cesc Fabregas every other player from this top 20 list has made more assists than was expected of them indicating they are reliable teammates. This information can be helpful when planning team strategies or even at the time of analysis of a rival team, you can ascertain which players in the rival team to keep the ball away from or which players to focus the defense on.\nIf we consider the previous chart displaying the total minutes played by each player, 11 out of the 20 players with the highest assists (i.e. 11 out of the players on the cleveland chart) have been the top five players for their respective teams in terms of minutes played. Indicating they are indeed extremely important for the team, some of these players include Mesut Ozil, Dimitri Payet, James Milner, Adam Lallana etc. However this is not always the case, nearly 50% of these 20 players did not play many minutes on their teams yet they contributed in the short time they were on the field making them critical for game strategies.\nAn interesting observation is that Troy Deeney exactly as many assists as expected. Talk about a good prediction!",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#goals-vs-xg",
    "href": "results.html#goals-vs-xg",
    "title": "3  Results",
    "section": "3.3 Goals vs xG",
    "text": "3.3 Goals vs xG\n\n\nCode\ndf_match_team_grouped &lt;- player_df %&gt;%\n  group_by(match_id, team_name, home_away) %&gt;%\n  summarise(\n    total_goals = sum(goals, na.rm = TRUE),\n    total_assists = sum(assists, na.rm = TRUE),\n    total_xG = sum(xG, na.rm = TRUE),\n    total_xA = sum(xA, na.rm = TRUE),\n    total_key_passes = sum(key_passes, na.rm = TRUE),\n    total_shots = sum(shots, na.rm = TRUE)\n  )\n\nscatter_plot &lt;- ggplot(df_match_team_grouped, aes(x = total_xG, y = total_goals, color = total_shots)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"xG vs Goals\", x = \"Expected Goals (xG)\", y = \"Goals\", size = \"Shots\") +\n  scale_color_viridis(option = \"C\", direction = -1) +\n  facet_wrap(~team_name) +\n  geom_abline(intercept = 0, slope = 1, color = \"steelblue\", linetype = \"dashed\", linewidth = 0.5) +\n   theme_minimal()\nprint(scatter_plot)\n\n\n\n\n\n\n\n\n\nxG, or expected goals, is a crucial metric in football that quantifies the quality of scoring chances a team creates during a match. A high xG indicates that a team has generated several good opportunities to score. Since goals are the ultimate objective in football, every team aims to maximize both their xG and their actual goals. If a team has a high xG but a lower number of goals, it suggests they are not capitalizing on their chances effectively. Conversely, a low xG paired with a high number of goals may indicate efficient finishing.\nFrom the graph, we observe that teams like Arsenal and Stoke City often have points below the y=x line, reflecting fewer goals than their xG—a sign they need to improve their conversion rate. On the other hand, teams like Liverpool frequently exceed the y=x line, demonstrating better utilization of their scoring opportunities.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#understanding-home-and-away-form-of-each-team",
    "href": "results.html#understanding-home-and-away-form-of-each-team",
    "title": "3  Results",
    "section": "3.4 Understanding home and away form of each team",
    "text": "3.4 Understanding home and away form of each team\n\n\nCode\ndf_team_grouped &lt;- df_match_team_grouped %&gt;%\n  group_by(team_name, home_away) %&gt;%\n  summarise(\n    total_goals = sum(total_goals, na.rm = TRUE),\n    total_assists = sum(total_assists, na.rm = TRUE),\n    total_xG = sum(total_xG, na.rm = TRUE),\n    total_xA = sum(total_xA, na.rm = TRUE),\n    total_key_passes = sum(total_key_passes, na.rm = TRUE),\n    total_shots = sum(total_shots, na.rm = TRUE),\n    matches=n()\n  )\n\ndf_team_grouped &lt;- df_team_grouped %&gt;%\n  mutate(\n    goals_per_match = total_goals / matches,\n    assists_per_match = total_assists / matches,\n    xG_per_match = total_xG / matches,\n    xA_per_match = total_xA / matches,\n    key_passes_per_match = total_key_passes / matches,\n    shots_per_match = total_shots / matches\n  )\n\ndf_long &lt;- df_team_grouped %&gt;%\n  pivot_longer(cols = c(xG_per_match, xA_per_match), names_to = \"metric\", values_to = \"value\")\n\ndf_long &lt;- df_team_grouped %&gt;%\n  pivot_longer(cols = c(\"xG_per_match\", \"xA_per_match\"), \n               names_to = \"metric\", \n               values_to = \"value\")\n\nggplot(df_long, aes(x = metric, y = value, fill = home_away)) + \n  geom_bar(stat = \"identity\", position = \"dodge\") + \n  facet_wrap(~ team_name) +\n  labs(\n    title = \"Comparison of xG and xA for Teams in Home and Away Matches\",\n    x = \"Metrics\",\n    y = \"Values\",\n    fill = \"Home/Away\"\n  ) +\n  scale_fill_manual(values = c(\"a\" = \"lightblue\", \"h\" = \"indianred\")) +  # Adjust colors for home/away\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThe above graph reveals a clear trend where most teams perform better at home than away, particularly in terms of xG (expected goals) per match. All teams, except Bournemouth, Hull City, Leicester City, Sunderland, and Swansea City, show higher xG per match when playing at home compared to away. A similar pattern is observed for xA (expected assists), further emphasizing the advantage of playing in a familiar home stadium. This trend suggests that the home atmosphere plays a significant role in a team’s performance. Teams with a higher xG and xA at home might benefit from the psychological and tactical advantages of playing in their own stadium. These statistics can be valuable for assessing a team’s overall strength, as well as identifying potential weaknesses or inconsistencies in their away form. By analyzing this data, coaches, analysts, and fans can better understand how home and away factors influence team performance throughout the season.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#reviewing-metrics-across-positions",
    "href": "results.html#reviewing-metrics-across-positions",
    "title": "3  Results",
    "section": "3.5 Reviewing metrics across positions",
    "text": "3.5 Reviewing metrics across positions\n\n\nCode\npos_match &lt;- c(\"AMC\" = \"MidFielder\",\"AML\" = \"MidFielder\",\"AMR\" = \"MidFielder\",\"MC\" = \"MidFielder\",\"MR\" = \"MidFielder\", \"ML\" = \"MidFielder\",\"DC\" = \"Defender\",\"DL\" = \"Defender\",\"DMC\" = \"Defender\",\"DML\" = \"Defender\",\"DMR\" = \"Defender\",\"DR\" = \"Defender\",\"FW\" = \"Forward\",\"FWL\" = \"Forward\",\"FWR\" = \"Forward\",\"GK\" = \"Forward\")\n\nplayer_df$pos &lt;- pos_match[as.character(player_df$position)]\n\ndf_position_grouped &lt;- player_df |&gt;\n  group_by(pos) |&gt;\n  summarise(\n    total_goals = sum(goals, na.rm = TRUE),\n    total_xG = sum(xG, na.rm = TRUE),\n    total_xA = sum(xA, na.rm = TRUE),\n    total_shots = sum(shots, na.rm = TRUE),\n    total_assists = sum(assists, na.rm = TRUE),\n    total_key_passes = sum(key_passes, na.rm = TRUE),\n    total_time_played = sum(time_played, na.rm=TRUE)\n  )\n\ndf_position_grouped = na.omit(df_position_grouped)\n\ndf_position_grouped &lt;- df_position_grouped |&gt;\n  mutate(\n    goals_per_match = total_goals*90/total_time_played,\n    assists_per_match = total_assists*90/total_time_played,\n    xG_per_match = total_xG*90/total_time_played,\n    xA_per_match = total_xA*90/total_time_played,\n    shots_per_match = total_shots*90/total_time_played,\n    key_passes_per_match = total_key_passes*90/total_time_played\n  )\n\nheatmap_data &lt;- df_position_grouped |&gt;\n  select(pos, goals_per_match, assists_per_match, xG_per_match, xA_per_match, shots_per_match, key_passes_per_match)\n\nheatmap_matrix &lt;- melt(heatmap_data, id.vars = \"pos\")\n\nggplot(heatmap_matrix, aes(x = variable, y = pos, fill = value)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"lightblue\", high = \"blue\") +\n  labs(\n    title = \"Heatmap of Per-Match Metrics by Position\",\n    x = \"Metric\",\n    y = \"Position\",\n    fill = \"Value\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nFrom the graph, we can observe that midfielders generally have the highest values for assists_per_match, xA_per_match, shots_per_match, and key_passes_per_match. Forwards tend to have slightly higher goals_per_match and xG_per_match compared to midfielders. Defenders contribute the least across these metrics when compared to midfielders and forwards. An interesting insight is that midfielders have higher shots_per_match than forwards, which is somewhat unexpected.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#investigating-total_shots-and-total_key_passes-for-each-team",
    "href": "results.html#investigating-total_shots-and-total_key_passes-for-each-team",
    "title": "3  Results",
    "section": "3.6 Investigating total_shots and total_key_passes for each team",
    "text": "3.6 Investigating total_shots and total_key_passes for each team\n\n\nCode\ndf_team_match_grouped &lt;- player_df |&gt;\n  group_by(match_id,team_name) |&gt;\n  summarise(\n    home_away = unique(home_away), \n    total_goals = sum(goals, na.rm = TRUE),\n    total_xG = sum(xG, na.rm = TRUE),\n    total_xA = sum(xA, na.rm = TRUE),\n    total_shots = sum(shots, na.rm = TRUE),\n    total_assists = sum(assists, na.rm = TRUE),\n    total_key_passes = sum(key_passes, na.rm = TRUE),\n    total_time_played = sum(time_played, na.rm=TRUE)\n  )\n\ndf_long_tm &lt;- df_team_match_grouped %&gt;%\n  pivot_longer(cols = c(total_shots, total_key_passes),\n               names_to = \"metric\",\n               values_to = \"value\")\n\nggplot(df_long_tm, aes(x = team_name, y = value, fill = metric)) +\n  geom_boxplot(position = position_dodge(0.8), color = \"black\") +\n  labs(title = \"Boxplot of Total Shots and Key Passes by Team\", \n       x = \"Team Names\", \n       y = \"Value\") +\n  scale_fill_manual(values = c(\"lightblue\", \"orange\"),\n                    labels = c(\"Total Shots\", \"Total Key Passes\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.title = element_blank())\n\n\n\n\n\n\n\n\n\nFrom the combined boxplot, it is evident that Manchester City and Tottenham Hotspur consistently exhibit the highest medians for both total shots and total key passes, reflecting their strong offensive gameplay. In contrast, Burnley shows the lowest median for total shots, indicating their struggles in creating scoring opportunities. Additionally, the plot highlights the presence of outliers, showcasing matches where teams performed significantly above or below their typical range. The visualization also provides insights into the lower and upper quartiles, offering a clear understanding of the variability and distribution of performance metrics across different teams.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#deconstructing-the-most-disciplinary-records-received-by-players",
    "href": "results.html#deconstructing-the-most-disciplinary-records-received-by-players",
    "title": "3  Results",
    "section": "3.7 Deconstructing the most disciplinary records received by players",
    "text": "3.7 Deconstructing the most disciplinary records received by players\n\n\nCode\ncard_summary &lt;- player_df |&gt;\n  group_by(player) |&gt;\n  summarize(total_yellow = sum(yellow_card, na.rm = TRUE),\n            total_red = sum(red_card, na.rm = TRUE)) |&gt;\n  arrange(desc(total_yellow)) |&gt;\n  head(50)\n\nmean_yellow &lt;- mean(card_summary$total_yellow)\nmean_red &lt;- mean(card_summary$total_red)\n\ncard_chart &lt;- ggplot(card_summary, aes(y = reorder(player, (total_yellow)))) +\n  geom_bar(aes(x = total_yellow), stat = \"identity\", fill = \"lightgoldenrod\") +\n  geom_bar(aes(x = total_red), stat = \"identity\", position = 'stack', fill = \"indianred\") +\n  labs(title = \"Disciplinary Records : Top 50 Players\", y = \"Player\", x = \"Yellow Cards\") +\n  theme_minimal() \nprint(card_chart)\n\n\n\n\n\n\n\n\n\nIn this study, we examined the disciplinary records of football players based on their yellow and red cards, focusing on the top 50 players with the highest number cards. The data was aggregated by player throughout the season, providing insight into the behavior of players in competitive matches. By looking at the chart, we can identify players who have accumulated the highest number of yellow and red cards, potentially indicating a more aggressive playing style or a higher frequency of fouls during games.\nThe yellow cards recieved by players are represented with yellow bars and the red cards are represented with red cards. We made the decision to overlay the red cards recieved on top of the yellow cards, instead of stacking them together, so as to study the disciplinary reocrd pattern observed in players.\nWe can observe that 11 are most number of foul cards obtained by 4 players and no player receives more than one red card. Instances of receiving a yellow foul card are higher than getiing a red card as a red card is more serious.\nMark Noble and James Milner are two players with a red card and the highest number of yellow cards. This distribution is right skewed as we ordered the data in descending order and there exists many people players who do not receive a foul card during their play.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#studying-the-expected-goals-and-oppositions-expected-goals-for-all-teams",
    "href": "results.html#studying-the-expected-goals-and-oppositions-expected-goals-for-all-teams",
    "title": "3  Results",
    "section": "3.8 Studying the expected goals and opposition’s expected goals for all teams",
    "text": "3.8 Studying the expected goals and opposition’s expected goals for all teams\n\n\nCode\ndf_with_lag &lt;- df_team_match_grouped |&gt;\n  group_by(match_id) |&gt;\n  mutate(across(total_goals:total_time_played, ~lag(.x), .names = \"opposition_{.col}\")) |&gt;\n  ungroup()\n\ndf_with_lead &lt;- df_team_match_grouped |&gt;\n  group_by(match_id) |&gt;\n  mutate(across(total_goals:total_time_played, ~lead(.x), .names = \"opposition_{.col}\")) |&gt;\n  ungroup()\n\ndf_with_lag = na.omit(df_with_lag)\ndf_with_lead = na.omit(df_with_lead)\n\ndf_combined =  rbind(df_with_lag, df_with_lead)\n\ndf_combined &lt;- df_combined |&gt;\n  mutate(result = case_when(\n    total_goals &gt; opposition_total_goals ~ \"win\",\n    total_goals == opposition_total_goals ~ \"tie\",\n    total_goals &lt; opposition_total_goals ~ \"loss\"\n  ))\n\nggplot(df_combined, aes(x = opposition_total_xG, y = total_xG, color = factor(result))) +\n  geom_point() +  \n  facet_wrap(~team_name) +  \n  labs(title = \"xG vs Opposition xG Faceted by Team\", \n       x = \"Opposition xG\", \n       y = \"xG\",\n       COLOR = \"result\") +\n  geom_abline(intercept = 0, slope = 1, color = \"steelblue\", linetype = \"dashed\", linewidth = 0.5) +\n  theme_minimal() +\n  scale_color_manual(values = c(\"loss\" = \"red\", \"tie\" = \"yellow\", \"win\" = \"green\"))\n\n\n\n\n\n\n\n\n\nThe scatter plot should ideally reflect the following: points lying above the line y = x (where xG are greater than the opposition’s xG) should be green, indicating a win for the team. Points on the line y = x (where the xG scored by both teams are equal) should be yellow, reflecting a draw. Points below the line y = x (where the opposition has more xG) should be red, representing a loss.\nAny deviation from this expected trend suggests that either the team or the opposition failed to capitalize on scoring opportunities. For example, a red point above the line y = x indicates that despite having more scoring chances (more xG), the team lost the match. This might reflect missed opportunities or an inability to convert chances effectively.\nOn the other hand, a green point above the line y = x indicates strong performance, where the team not only had more scoring chances but also capitalized on them effectively, leading to a win. Teams like Arsenal, Leicester City, and Tottenham Hotspur, which have numerous green points above y = x , demonstrate good performance by converting their opportunities into victories.\nConversely, teams like Aston Villa and Norwich City show a different trend, with more red points below the line y = x . This suggests that although they might have had opportunities, they either failed to capitalize on them or could not prevent the opposition from scoring, resulting in a poor performance. Such teams may need to focus on improving both their attacking efficiency and defensive resilience.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#dissecting-performance-metrics-trends-in-teams",
    "href": "results.html#dissecting-performance-metrics-trends-in-teams",
    "title": "3  Results",
    "section": "3.9 Dissecting performance metrics trends in teams",
    "text": "3.9 Dissecting performance metrics trends in teams\n\n\nCode\n# Summarize metrics by team_name\ndf_team_grouped &lt;- df_combined |&gt;\n  group_by(team_name) |&gt;\n  summarise(\n    avg_goals = mean(total_goals, na.rm = TRUE),\n    avg_xG = mean(total_xG, na.rm = TRUE),\n    avg_xA = mean(total_xA, na.rm = TRUE),\n    avg_shots = mean(total_shots, na.rm = TRUE),\n    avg_assists = mean(total_assists, na.rm = TRUE),\n    avg_key_passes = mean(total_key_passes, na.rm = TRUE),\n    .groups = \"drop\"  # Prevent grouping in output\n  )\nlibrary(parcoords)\nparcoords(df_team_grouped, \n          rownames = FALSE,\n          reorderable = TRUE, \n          brushMode = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Team Performance Dashboard\n\n\n\n\n\nHome Away All",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive graph</span>"
    ]
  }
]